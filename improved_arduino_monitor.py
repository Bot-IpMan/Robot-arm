#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
improved_arduino_monitor.py
===========================

–ú–µ—Ç–∞:
‚Ä¢ –ù–∞–¥—ñ–π–Ω–æ —á–∏—Ç–∞—Ç–∏ —Ä—è–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ Arduino —á–µ—Ä–µ–∑ /dev/arduino (udev-–ª—ñ–Ω–∫).
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏—Ä–∏–≤–∞–Ω–Ω—è/–≤—Å—Ç–∞–≤–ª—è–Ω–Ω—è USB.
‚Ä¢ –ü–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ —Ä—è–¥–∫–∏ –¥–∞–ª—ñ:
    ‚Äì –¥—Ä—É–∫ —É stdout (–º–æ–∂–µ –∑–∞–±–∏—Ä–∞—Ç–∏ Node-RED Exec node –∞–±–æ systemd-–∂—É—Ä–Ω–∞–ª);
    ‚Äì *–æ–ø—Ü—ñ–π–Ω–æ* –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è —É MQTT-–±—Ä–æ–∫–µ—Ä (–≤–º–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∞–ø–æ—Ä—Ü–µ–º).

–§–æ—Ä–º–∞—Ç –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä—è–¥–∫–∞ (–ø—Ä–∏–∫–ª–∞–¥):
    "AHT20 T: 26.45 C, H: 49.80 % | BMP280 T: 27.42 C, P: 985.48 hPa | MQ-9: 127"

–ê–≤—Ç–æ—Ä: –î–º–∏—Ç—Ä–æ <you@example.com>
"""

import os
import sys
import time
import logging
import argparse
from pathlib import Path

try:
    import serial
    from serial.serialutil import SerialException
except ImportError:
    sys.exit("‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å pyserial:  sudo pip3 install pyserial")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ CLI)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DEFAULT_PORT  = "/dev/arduino"
DEFAULT_BAUD  = 9600
DEFAULT_MQTT  = False
DEFAULT_TOPIC = "sensors/raw"

# –Ø–∫—â–æ –ø–ª–∞–Ω—É—î—Ç–µ MQTT ‚Äì —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –π –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å paho-mqtt
try:
    import paho.mqtt.client as mqtt  # noqa: E402
except ModuleNotFoundError:
    mqtt = None  # –ú–æ–∂–Ω–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ MQTT


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –§—É–Ω–∫—Ü—ñ—ó –¥–æ–ø–æ–º—ñ–∂–Ω—ñ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def now() -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM:SS –¥–ª—è –¥—Ä—É–∫—É."""
    return time.strftime("%H:%M:%S")


def setup_logger(verbosity: int) -> logging.Logger:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä—É—î –ª–æ–≥–µ—Ä —ñ–∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º –≤–∏–≤–æ–¥–æ–º —É systemd-–∂—É—Ä–Ω–∞–ª —á–∏ –∫–æ–Ω—Å–æ–ª—å."""
    lvl = logging.DEBUG if verbosity > 1 else logging.INFO if verbosity == 1 else logging.WARNING
    logging.basicConfig(
        level=lvl,
        format="%(asctime)s [%(levelname)s] %(message)s",
        datefmt="%H:%M:%S",
        handlers=[logging.StreamHandler(sys.stdout)],
    )
    return logging.getLogger("arduino-monitor")


def open_serial(port: str, baud: int, log: logging.Logger) -> serial.Serial:
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î —Å–µ—Ä—ñ–π–Ω–∏–π –ø–æ—Ä—Ç —ñ–∑ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏."""
    backoff = 2  # c–µ–∫—É–Ω–¥–∏ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
    while True:
        try:
            ser = serial.Serial(port, baud, timeout=2)
            log.info(f"üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ {port} @ {baud} –±–æ–¥")
            # ¬´—á–∏—Å—Ç–∏–º–æ¬ª –±—É—Ñ–µ—Ä, —â–æ–± –Ω–µ –∑–ª–æ–≤–∏—Ç–∏ –æ–±—Ä—ñ–∑–∞–Ω–∏–π —Ä—è–¥–æ–∫
            ser.reset_input_buffer()
            return ser
        except SerialException as e:
            log.warning(f"‚ö†Ô∏è  {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {backoff}s‚Ä¶")
            time.sleep(backoff)
            backoff = min(backoff * 2, 30)  # –µ–∫—Å–ø–æ–Ω. backoff –¥–æ 30 —Å


def mqtt_connect(broker: str, port: int, log: logging.Logger):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∑‚Äô—î–¥–Ω–∞–Ω–∏–π MQTT-–∫–ª—ñ—î–Ω—Ç –∞–±–æ None."""
    if mqtt is None:
        log.error("paho-mqtt –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, MQTT –≤–∏–º–∫–Ω–µ–Ω–æ")
        return None
    client = mqtt.Client()
    try:
        client.connect(broker, port, keepalive=60)
        client.loop_start()
        log.info(f"üì° –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MQTT {broker}:{port}")
        return client
    except Exception as e:
        log.error(f"üö´ MQTT –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–ª–µ–Ω–µ: {e}")
        return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    parser = argparse.ArgumentParser(
        description="–ù–∞–¥—ñ–π–Ω–∏–π —á–∏—Ç–∞—á Serial ‚Üí stdout (+MQTT)",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("--port", default=os.getenv("ARDUINO_PORT", DEFAULT_PORT), help="—Å–µ—Ä—ñ–π–Ω–∏–π –ø–æ—Ä—Ç –∞–±–æ udev-–ª—ñ–Ω–∫")
    parser.add_argument("--baud", default=int(os.getenv("ARDUINO_BAUD", DEFAULT_BAUD)), type=int, help="—à–≤–∏–¥–∫—ñ—Å—Ç—å –±–æ–¥")
    parser.add_argument("--mqtt", action="store_true", default=DEFAULT_MQTT, help="–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —É MQTT")
    parser.add_argument("--mqtt-host", default=os.getenv("MQTT_HOST", "localhost"), help="MQTT broker host")
    parser.add_argument("--mqtt-port", default=int(os.getenv("MQTT_PORT", 1883)), type=int, help="MQTT port")
    parser.add_argument("--topic", default=os.getenv("MQTT_TOPIC", DEFAULT_TOPIC), help="MQTT topic –¥–ª—è raw-–¥–∞–Ω–∏—Ö")
    parser.add_argument("-v", "--verbose", action="count", default=0, help="—Ä—ñ–≤–µ–Ω—å –ø–æ–¥—Ä–æ–±–∏—Ü—å (-v, -vv)")
    args = parser.parse_args()

    log = setup_logger(args.verbose)

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è MQTT (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
    mqtt_client = mqtt_connect(args.mqtt_host, args.mqtt_port, log) if args.mqtt else None

    # –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª ¬´–≤—ñ–¥–∫—Ä–∏–π –ø–æ—Ä—Ç ‚Üí —á–∏—Ç–∞–π —Ä—è–¥–∫–∏ ‚Üí –ø—Ä–∏ –≤—Ç—Ä–∞—Ç—ñ ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–Ω–æ–≤—É¬ª
    while True:
        ser = open_serial(args.port, args.baud, log)
        while True:
            try:
                raw = ser.readline()              # bytes
                if not raw:
                    continue                      # timeout –±–µ–∑ –¥–∞–Ω–∏—Ö
                line = raw.decode(errors="ignore").strip()
                if not line:
                    continue
                # 1) –î—Ä—É–∫ —É stdout (–±–∞—á–∏—Ç—å systemd-journal, Node-RED Exec —ñ–Ω–ø—É—Ç)
                print(line, flush=True)

                # 2) MQTT (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
                if mqtt_client:
                    mqtt_client.publish(args.topic, payload=line, qos=0, retain=False)

            except SerialException as e:
                log.warning(f"üîå –ó‚Äô—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ: {e}")
                try:
                    ser.close()
                except Exception:
                    pass
                break  # –≤–∏—Ö–æ–¥–∏–º–æ —É –∑–æ–≤–Ω—ñ—à–Ω—ñ–π while True ‚Üí reopen

            except KeyboardInterrupt:
                log.info("‚èπÔ∏è  –ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl-C)")
                try:
                    ser.close()
                except Exception:
                    pass
                if mqtt_client:
                    mqtt_client.loop_stop()
                    mqtt_client.disconnect()
                sys.exit(0)

            except Exception as e:
                log.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                # –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ü–∏–∫–ª ‚Äî –Ω–µ –≤–∞–ª–∏–º–æ —Å–µ—Ä–≤—ñ—Å


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    main()
