/*
 * –†–û–ë–û–£–ö–ê –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Node-RED –∫–µ—Ä—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ TX12
 * Arduino Mega 2560 + PCA9685 + –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∏ MG90S
 * –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ñ–¥ Node-RED
 */

#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>

// –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç PCA9685
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ñ–≤ MG90S
const int SERVO_MIN = 150;   // ~0.75ms pulse 
const int SERVO_MAX = 600;   // ~3.0ms pulse
const int SERVO_MID = 375;   // ~1.875ms pulse (90¬∞)

// –ö–∞–Ω–∞–ª–∏ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ñ–≤
const int BASE_SERVO = 0;      // S1
const int SHOULDER_SERVO = 1;  // S2
const int ELBOW_SERVO = 2;     // S3
const int WRIST_SERVO = 3;     // S4
const int GRIPPER_SERVO = 4;   // –ó–∞—Ö–æ–ø–ª—é–≤–∞—á

// –ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ñ–≤
int current_positions[5] = {90, 90, 90, 90, 90}; // –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤ –≥—Ä–∞–¥—É—Å–∞—Ö

// –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥
String inputBuffer = "";
bool commandReady = false;

void setup() {
  Serial.begin(115200);
  
  // –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  while (!Serial) {
    delay(10);
  }
  
  Serial.println("=== –†–û–ë–û–£–ö–ê NODE-RED CONTROL ===");
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è I2C
  Wire.begin();
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PCA9685
  pwm.begin();
  pwm.setOscillatorFrequency(27000000);
  pwm.setPWMFreq(50);  // 50Hz –¥–ª—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ñ–≤
  
  // –í–∏–º–∏–∫–∞—î–º–æ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏
  for (int i = 0; i < 16; i++) {
    pwm.setPWM(i, 0, 0);
  }
  
  delay(500);
  
  // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≤—Å—ñ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∏ –≤ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
  moveAllToHome();
  
  Serial.println("‚úì –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏");
  Serial.println("–û—á—ñ–∫—É—é –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥ Node-RED...");
}

void loop() {
  // –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  while (Serial.available() > 0) {
    char inChar = (char)Serial.read();
    
    if (inChar == '\n' || inChar == '\r') {
      if (inputBuffer.length() > 0) {
        processCommand(inputBuffer);
        inputBuffer = "";
      }
    } else {
      inputBuffer += inChar;
    }
  }
  
  // –ù–µ–≤–µ–ª–∏–∫–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
  delay(10);
}

void processCommand(String command) {
  command.trim();
  
  if (command.length() == 0) return;
  
  Serial.print("–û—Ç—Ä–∏–º–∞–Ω–æ: ");
  Serial.println(command);
  
  // –û–±—Ä–æ–±–∫–∞ –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ (—Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ ;)
  int startIndex = 0;
  int endIndex = command.indexOf(';');
  
  while (endIndex != -1 || startIndex < command.length()) {
    String singleCommand;
    
    if (endIndex != -1) {
      singleCommand = command.substring(startIndex, endIndex);
      startIndex = endIndex + 1;
      endIndex = command.indexOf(';', startIndex);
    } else {
      singleCommand = command.substring(startIndex);
      startIndex = command.length();
    }
    
    singleCommand.trim();
    if (singleCommand.length() > 0) {
      executeSingleCommand(singleCommand);
    }
  }
}

void executeSingleCommand(String cmd) {
  cmd.toUpperCase();
  
  // –ö–æ–º–∞–Ω–¥–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞–º–∏ S1-S4
  if (cmd.startsWith("S1:")) {
    int angle = cmd.substring(3).toInt();
    moveServo(BASE_SERVO, angle);
  }
  else if (cmd.startsWith("S2:")) {
    int angle = cmd.substring(3).toInt();
    moveServo(SHOULDER_SERVO, angle);
  }
  else if (cmd.startsWith("S3:")) {
    int angle = cmd.substring(3).toInt();
    moveServo(ELBOW_SERVO, angle);
  }
  else if (cmd.startsWith("S4:")) {
    int angle = cmd.substring(3).toInt();
    moveServo(WRIST_SERVO, angle);
  }
  
  // –ö–æ–º–∞–Ω–¥–∏ –∑–∞—Ö–æ–ø–ª—é–≤–∞—á–∞
  else if (cmd == "GRIP:OPEN") {
    moveServo(GRIPPER_SERVO, 0);    // –í—ñ–¥–∫—Ä–∏—Ç–∏
    Serial.println("‚úì –ó–∞—Ö–æ–ø–ª—é–≤–∞—á –≤—ñ–¥–∫—Ä–∏—Ç–æ");
  }
  else if (cmd == "GRIP:CLOSE") {
    moveServo(GRIPPER_SERVO, 180);  // –ó–∞–∫—Ä–∏—Ç–∏
    Serial.println("‚úì –ó–∞—Ö–æ–ø–ª—é–≤–∞—á –∑–∞–∫—Ä–∏—Ç–æ");
  }
  
  // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
  else if (cmd == "HOME") {
    moveAllToHome();
    Serial.println("‚úì –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –¥–æ–º–∞—à–Ω—é –ø–æ–∑–∏—Ü—ñ—é");
  }
  else if (cmd == "READY") {
    moveAllToReady();
    Serial.println("‚úì –ì–æ—Ç–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è");
  }
  else if (cmd == "STOP") {
    stopAllServos();
    Serial.println("‚úì –í—Å—ñ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∏ –∑—É–ø–∏–Ω–µ–Ω–æ");
  }
  else if (cmd == "STATUS") {
    printStatus();
  }
  
  // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
  else if (cmd == "TEST") {
    testAllServos();
  }
  else if (cmd == "PING") {
    Serial.println("PONG");
  }
  
  else {
    Serial.print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ");
    Serial.println(cmd);
  }
}

void moveServo(int servo_num, int angle) {
  // –û–±–º–µ–∂—É—î–º–æ –∫—É—Ç
  angle = constrain(angle, 0, 180);
  
  // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫—É—Ç –≤ PWM –∑–Ω–∞—á–µ–Ω–Ω—è
  int pwm_value = map(angle, 0, 180, SERVO_MIN, SERVO_MAX);
  
  // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É
  pwm.setPWM(servo_num, 0, pwm_value);
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é
  if (servo_num < 5) {
    current_positions[servo_num] = angle;
  }
  
  Serial.print("‚úì –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ ");
  Serial.print(servo_num);
  Serial.print(" ‚Üí ");
  Serial.print(angle);
  Serial.println("¬∞");
}

void moveAllToHome() {
  // –î–æ–º–∞—à–Ω—è –ø–æ–∑–∏—Ü—ñ—è - –≤—Å—ñ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ
  for (int i = 0; i < 5; i++) {
    moveServo(i, 90);
    delay(100);  // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ä—É—Ö–∞–º–∏
  }
}

void moveAllToReady() {
  // –ì–æ—Ç–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –¥–ª—è —Ä–æ–±–æ—Ç–∏
  moveServo(BASE_SERVO, 90);      // –ë–∞–∑–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
  moveServo(SHOULDER_SERVO, 45);  // –ü–ª–µ—á–µ –ø—ñ–¥–Ω—è—Ç–æ
  moveServo(ELBOW_SERVO, 135);    // –õ—ñ–∫–æ—Ç—å –∑—ñ–≥–Ω—É—Ç–æ
  moveServo(WRIST_SERVO, 90);     // –ó–∞–ø'—è—Å—Ç—è –ø—Ä—è–º–æ
  moveServo(GRIPPER_SERVO, 45);   // –ó–∞—Ö–æ–ø–ª—é–≤–∞—á –Ω–∞–ø—ñ–≤–≤—ñ–¥–∫—Ä–∏—Ç–∏–π
  delay(1000);
}

void stopAllServos() {
  // –í–∏–º–∏–∫–∞—î–º–æ –≤—Å—ñ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∏
  for (int i = 0; i < 5; i++) {
    pwm.setPWM(i, 0, 0);
  }
}

void testAllServos() {
  Serial.println("üîÑ –¢–µ—Å—Ç –≤—Å—ñ—Ö —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ñ–≤...");
  
  for (int servo = 0; servo < 5; servo++) {
    Serial.print("–¢–µ—Å—Ç—É—î–º–æ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ ");
    Serial.println(servo);
    
    // –¢–µ—Å—Ç —Ç—Ä—å–æ—Ö –ø–æ–∑–∏—Ü—ñ–π
    moveServo(servo, 0);
    delay(500);
    moveServo(servo, 90);
    delay(500);
    moveServo(servo, 180);
    delay(500);
    moveServo(servo, 90);
    delay(500);
  }
  
  Serial.println("‚úì –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
}

void printStatus() {
  Serial.println("=== –°–¢–ê–¢–£–° –†–û–ë–û–†–£–ö–ò ===");
  Serial.print("–ë–∞–∑–∞ (S1): ");
  Serial.println(current_positions[0]);
  Serial.print("–ü–ª–µ—á–µ (S2): ");
  Serial.println(current_positions[1]);
  Serial.print("–õ—ñ–∫–æ—Ç—å (S3): ");
  Serial.println(current_positions[2]);
  Serial.print("–ó–∞–ø'—è—Å—Ç—è (S4): ");
  Serial.println(current_positions[3]);
  Serial.print("–ó–∞—Ö–æ–ø–ª—é–≤–∞—á: ");
  Serial.println(current_positions[4]);
  Serial.println("=====================");
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Ä—É—Ö—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
void smoothMove(int servo_num, int target_angle) {
  int current_angle = current_positions[servo_num];
  int step = (target_angle > current_angle) ? 1 : -1;
  
  for (int angle = current_angle; angle != target_angle; angle += step) {
    moveServo(servo_num, angle);
    delay(20);  // –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–ª–∞–≤–Ω–æ–≥–æ —Ä—É—Ö—É
  }
}